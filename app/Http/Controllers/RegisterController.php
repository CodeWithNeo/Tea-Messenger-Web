<?php

/**
 *  Generated by IceTea Framework 0.0.1
 *  Created at 2017-11-18 13:14:19
 *  Namespace App\Http\Controllers
 */

namespace App\Http\Controllers;

use App\User;
use App\Register;
use IceTea\Http\Controller;

class RegisterController extends Controller
{
    /**
     * Show register view.
     */
    public function index()
    {
        return view("auth/register");
    }

    public function success()
    {
        if ($id = $this->isRegisterdCookie()) {
            setcookie("registered", null, 0);
            $info = User::getInfo($id, "a.user_id");
            return view("auth/register_success", compact('info'));
        } else {
            abort(404);
        }
    }

    private function isRegisterdCookie()
    {
        if (isset($_COOKIE['registered']) and 
            $id = json_decode(base64_decode(strrev($_COOKIE['registered'])), true) and 
            isset($id['id']) and 
            Register::check($id['id'], "user_id")
        ) {
            return $id['id'];
        }
        return false;
    }

    /**
     * Action
     */
    public function action()
    {
    	$input = file_get_contents("php://input");
        $input = json_decode($input, true);
        if (isset(
            $input['first_name'], 
            $input['last_name'], 
            $input['email'],
            $input['username'],
            $input['password'],
            $input['cpassword']
        ) && $this->isValidDevice()) {
            $this->validator($input);
        } else {
            abort(404);
        }
    }

    private function isValidDevice()
    {
        return true;
    }

    private function validator($input)
    {
        header("Content-type:application/json");
        empty($input['first_name']) and $this->err("Invalid first name!");
        filter_var($input['email'], FILTER_VALIDATE_EMAIL) or $this->err("Invalid email!");
        $len = strlen($input['username']);
        $len > 3  or $this->err("Username too short, please provide username more than 4 characters!");
        $len < 33 or $this->err("Username too long, please provide username less than 32 characters!");
        $input['password'] === $input['cpassword'] or $this->err("Confirm password does not match!");
        $len = strlen($input['password']);
        $len > 6 or $this->err("Password too short, please provide password more than 6 characters!");
        (!preg_match("#[^[:print:]]#", $input['password'])) or $this->err("Password must not contains unprintable chars!");
        Register::check($input['email'], "email") and $this->err("Email has registered, please provide more email!");
        Register::check($input['username'], "username") and $this->err("Username has registered, please provide more username!");
        if ($reg = Register::insert($input)) {
            $this->suc("Register success!", $reg);
        } else {
            $this->err("Internal error!");
        }
    }

    private function err($msg)
    {
        http_response_code(400);
        exit($this->buildJson(
            [
                "status"    => "error",
                "message"   => $msg,
                "redirect"  => null
            ]
        ));
    }

    private function suc($msg, $reg)
    {
        http_response_code(200);
        setcookie(
            "registered", 
            strrev(base64_encode(json_encode(
                [
                    "id" => $reg,
                    "rd" => rstr(32)
                ]
            ))),
            time()+3600);
        exit($this->buildJson(
            [
                "status"    => "ok",
                "message"   => $msg,
                "redirect"  => "/register/success"
            ]
        ));
    }

    private function buildJson($data)
    {
        return json_encode($data);
    }
}
