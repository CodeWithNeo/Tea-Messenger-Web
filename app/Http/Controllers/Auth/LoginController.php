<?php

/**
 *  Generated by IceTea Framework 0.0.1
 *  Created at 2017-11-12 10:05:19
 *  Namespace App\Http\Controllers\Auth
 */

namespace App\Http\Controllers\Auth;

use App\Login;
use IceTea\Http\Controller;
use App\Http\Controllers\Auth\CSRFToken;

class LoginController extends Controller
{
    use CSRFToken;

    private $token;

    public function __construct()
    {
        
        parent::__construct();
    }

    public function index()
    {
        //
    }

    public function logout()
    {
        if (Login::isLoggedIn()) {
            Login::logout();
            setcookie("session_id", null, 0);
            setcookie("session_key", null, 0);
            setcookie("user_id", null, 0);
            header("location:/?ref=logout&w=".urlencode(base64_encode(rstr(64))));
            exit();
        }
    }

    

    public function loginPage()
    {
        if (Login::isLoggedIn()) {
            header("location:/");
            exit();
        }
        $this->makeCSRF();
        return view("auth/login", ["that" => $this]);
    }

    public function indexLogin()
    {
        return $this->loginPage();
    }

    public function action()
    {
        $input = json_decode(file_get_contents("php://input"), true);
        if (isset(
            $input['username'],
            $input['password'],
            $input['csrf']
        )) {
            header("Content-type:application/json");
            if (! $this->csrfValidation($input['csrf'])) {
                $this->err("Token mismatch!", "?err=token_mismatch&w=".urlencode(rstr(64)));
            }
            if ($cred = Login::validateCredentials($input['username'], $input['password'])) {
                $_14 = time() + 3600 * 24 * 14;
                setcookie("session_id", ice_encrypt($cred['session_id'], $cred['key']), $_14);
                setcookie("user_id", ice_encrypt($cred['user_id'], $cred['key']), $_14);
                setcookie("session_key",ice_encrypt($cred['key'], "tea_messenger123"), $_14);
                exit($this->buildJson(
                    [
                        "status"   => "ok",
                        "message"  => null,
                        "redirect" => "?ref=login&w=".urlencode(base64_encode(rstr(64)))
                    ]
                ));
            }
        } else {
            abort(404);
        }
    }

    private function err($msg, $url = null)
    {
        http_response_code(400);
        exit($this->buildJson(
            [
                "status"   => "error",
                "message"  => $msg,
                "redirect" => $url
            ]
        ));
    }

    private function buildJson($data)
    {
        return json_encode($data, JSON_UNESCAPED_SLASHES);
    }
}
